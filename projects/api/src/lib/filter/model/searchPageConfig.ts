/**
 * Filter API 2
 *
 * Contact: info@it4all.hu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { StoredCollectionDescriptor } from '../../default';
import { FilterExpressionBuilderModel } from './filterExpressionBuilderModel';
import { GridView } from '../../default';
import { FilterExpressionBuilderApiConfig } from './filterExpressionBuilderApiConfig';


/**
 * This object has every configuration data that is necessary to open a SearchIndexResult page. It contains the possible filter expressions in a FilterExpresisonBuilderModel and also the parameterization of the result grid in a GridViewDescriptor object. 
 */
export interface SearchPageConfig { 
    uri?: string;
    /**
     * The page title that can be set induvidually. If it is empty then the FilterExpressionBuilderModel label property will be the page title and we skip set the label of the component itself. So we can skip this value. 
     */
    pageTitle?: string;
    filterModel?: FilterExpressionBuilderModel;
    filterConfig?: FilterExpressionBuilderApiConfig;
    /**
     * The schema name of the search index.
     */
    searchIndexSchema?: string;
    /**
     * The name of the search index.
     */
    searchIndexName?: string;
    /**
     * The conteiner to run the query against.
     */
    container?: StoredCollectionDescriptor;
    /**
     * If we set this property then the given search page is iterating through the version of this object.
     */
    historyObjectUri?: string;
    /**
     * If we set this property then the page is loading the given version as the oldest one.
     */
    historyLowerBound?: number;
    /**
     * If we set this property then the page is loading the given version as the newest one.
     */
    historyUpperBound?: number;
    /**
     * The nummber is history elements are well-known. The last version number show how many version we have. Under this limit we load all the versions and like a normal list of object. 
     */
    historyLoadAllLimit?: number;
    /**
     * If we set this property and skip any or all of the lower or upper bound then we load this this number of versions after the lower bound or before the upper bound or before the latest version. It will be the initial size of the pageing while iteration through the history entries. 
     */
    historyPageSize?: number;
    /**
     * If we set this property then the result grid will have this page size. 
     */
    pageSize?: number;
    /**
     * Execute query right after the page is opened or not.
     */
    skipInitialQuery?: boolean;
    /**
     * If there is no result for the search, then show this text instead of the empty table.
     */
    noResultText?: string;
    /**
     * The appearence of the result grid can be parameterized with this object. If we pass no option then the default grid will appear. If we pass more than one then the user can select with an option selector. 
     */
    gridViewOptions: Array<GridView>;
    defaultRowActions?: Array<string>;
    fieldsToQuery: Array<string>;
}

