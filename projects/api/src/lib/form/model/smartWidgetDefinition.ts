/**
 * Form layout definition
 *
 * Contact: info@it4all.hu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { SelectionDefinition } from './selectionDefinition';
import { IconPosition } from '../../view/model/iconPosition';
import { SmartFormWidgetDirection } from './smartFormWidgetDirection';
import { SmartWidgetHint } from './smartWidgetHint';
import { SmartFormWidgetType } from './smartFormWidgetType';
import { Value } from '../../value/model/value';
import { Style } from '../../view/model/style';
import { ValueChangeMode } from './valueChangeMode';
import { SmartMatrixModel } from './smartMatrixModel';
import { SmartFormInputMode } from './smartFormInputMode';


/**
 * The layout definition of the SmartTextField widget.
 */
export interface SmartWidgetDefinition { 
    type: SmartFormWidgetType;
    inputMode?: SmartFormInputMode;
    /**
     * The path of the desired parameter in the object.
     */
    key: string;
    /**
     * The label of the text field
     */
    label: string;
    /**
     * The placeholder of the text field
     */
    placeholder?: string;
    /**
     * Text that appears as a prefix
     */
    prefix?: string;
    /**
     * Text that appears as a suffix
     */
    suffix?: string;
    /**
     * A descriptor that masks the input
     */
    mask?: string;
    /**
     * An icon which appears as a suffix
     */
    icon?: string;
    /**
     * Material theme class of the icon
     */
    iconColor?: string;
    /**
     * Position of the icon (pre/post)
     */
    iconPosition?: IconPosition;
    /**
     * Defines if the label appears above the widget or not
     */
    showLabel?: boolean;
    /**
     * Optional css class of the widget
     */
    cssClass?: string;
    /**
     * Optional css class of the label of the widget
     */
    cssLabelClass?: string;
    style?: Style;
    labelStyle?: Style;
    /**
     * Defines if the widget is a password input
     */
    isPassword?: boolean;
    values?: Array<Value>;
    childrenComponents?: Array<SmartWidgetDefinition>;
    selection?: SelectionDefinition;
    direction?: SmartFormWidgetDirection;
    matrix?: SmartMatrixModel;
    hint?: SmartWidgetHint;
    widgetDescription?: string;
    maxLength?: number;
    valueChangeMode?: ValueChangeMode;
    showCharacterLimitSuffix?: boolean;
    /**
     * The default error message to show if the widget features an autocompletion filter operation, which returns no elements. 
     */
    filterErrorMessage?: string;
    /**
     * Identifier of the toolbar associated with this widget. 
     */
    toolbarId?: string;
    /**
     * Additional properties the client may use to customise the appearance or behaviour of the widget. 
     */
    properties?: { [key: string]: object; };
    /**
     * The error message to show for the widget. 
     */
    errorMessage?: string;
    /**
     * The error message to show for the widget. 
     */
    errorIcon?: string;
    /**
     * The error message to show for the widget. 
     */
    errorColor?: string;
}
export namespace SmartWidgetDefinition {
}


