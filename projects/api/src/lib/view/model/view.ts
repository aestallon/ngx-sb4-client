/**
 * View API
 *
 * Contact: info@it4all.hu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { ViewEventHandler } from './viewEventHandler';
import { SmartLayoutDefinition } from '../../form/model/smartLayoutDefinition';
import { SmartComponentLayoutDefinition } from '../../scld/model/smartComponentLayoutDefinition';
import { Style } from './style';
import { ViewState } from './viewState';
import { ViewPlaceholder } from './viewPlaceholder';
import { UiAction } from './uiAction';
import { ValueSet } from './valueSet';
import { ViewType } from './viewType';
import { ViewConstraint } from './viewConstraint';


export interface View { 
    /**
     * Unique identifier of the View.
     */
    uuid: string;
    viewName: string;
    objectUri?: string;
    branchUri?: string;
    /**
     * The incoming parameters of the view. If we restart the given view with the same model then this parameters remain.
     */
    parameters: { [key: string]: any; };
    /**
     * The variable to store while the page is opened. It will be cleared if we open it again.
     */
    variables: { [key: string]: any; };
    state: ViewState;
    type: ViewType;
    containerUuid?: string;
    model?: object;
    constraint?: ViewConstraint;
    closedChildrenViews: Array<ViewPlaceholder>;
    downloadableItems: { [key: string]: string; };
    actions: Array<UiAction>;
    eventHandlers: Array<ViewEventHandler>;
    widgetModels: { [key: string]: object; };
    widgetServerModels: { [key: string]: object; };
    valueSets: { [key: string]: ValueSet; };
    keepModelOnImplicitClose?: boolean;
    callbacks: { [key: string]: object; };
    /**
     * The layouts defined in the view. This named layouts can be used by the UI to render
     */
    layouts: { [key: string]: SmartLayoutDefinition; };
    /**
     * The components layouts defined in the view. This named layouts can be used by the UI to render
     */
    componentLayouts: { [key: string]: SmartComponentLayoutDefinition; };
    style?: Style;
    parentStyle?: Style;
}
export namespace View {
}


