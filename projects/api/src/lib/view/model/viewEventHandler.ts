/**
 * View API
 *
 * Contact: info@it4all.hu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { InvocationRequest } from '../../default';


/**
 * An event handler is a special callback function to call when the given event is occurred. So the event handler can be an action as is or can be fired on a before or after event 
 */
export interface ViewEventHandler { 
    /**
     * The event handler path defines the location of the event. We can use regular expressions to fine tune the event definition. In this way we can add before event handler for all the actions we have. The actions will have a predefined path. The path of the normal actions is the action code itself. 
     */
    path?: Array<string>;
    viewEventType?: ViewEventHandler.ViewEventTypeEnum;
    /**
     * This is the method to call when the event occurs. It\'s signature is the same as the event which it specifies, like ActionHandler or WidgetActionHandler. 
     */
    invocationRequest?: InvocationRequest;
}
export namespace ViewEventHandler {
    export const ViewEventTypeEnum = {
        Before: 'before',
        Instead: 'instead',
        After: 'after'
    } as const;
    export type ViewEventTypeEnum = typeof ViewEventTypeEnum[keyof typeof ViewEventTypeEnum];
}


