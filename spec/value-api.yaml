openapi: 3.0.1
info:
  title: value api
  description: value api
  termsOfService: ''
  contact:
    email: info@it4all.hu
  version: 1.0.0
tags:
  - name: Value
paths:
  /possibleValues/{objectUri}:
    get:
      tags:
        - Value
      summary: Returns the possible value set for the given URI
      operationId: 'possibleValues'
      parameters:
        - in: path
          name: objectUri
          schema:
            type: string
          required: true
          description: 'The URI of the field the possible values are requested for'
      responses:
        '200':
          description: 'The requested possible values'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Value'
components:
  schemas:
    Value:
      type: object
      required: []
      properties:
        objectUri:
          type: string
          format: uri
          description: 'The uri the object of the value can be accessed.'
        code:
          type: string
          description: The logical code of the selectable value.
        displayValue:
          type: string
          description: 'The string value that can be shown on ui. It might be a label code or the exact label.'
        iconCode:
          type: string
          description: 'The code of icon that can be associatied with the value. It may be a uri.'
    ValueSetData:
      type: object
      required: [qualifiedName, properties, values]
      description: |
        The instance of the ValueSetDefintion that conatins every information inline.
      properties:
        qualifiedName:
          type: string
        keyProperty:
          type: string
          description: |
            The name of the key property in the value. It will be the value that copied into the reference when a given
            item is selected from the value set.
        properties:
          type: array
          items:
            type: PropertyDefinitionData
        iconCode:
          type: string
          description: Optional icon code for the given value set.
        undefined:
          type: boolean
          default: true
          description: |
            If true then the value set is not defined and not accessible.
        lazy:
          type: boolean
          default: false
          description: |
            If true then the values doesn't contains the the whole values set or it migth be
            empty and we have to ask for filtered set of values using the filter fields available.
        values:
          type: array
          items:
            type: object
        filterModel:
          type: FilterExpressionBuilderModel
          description: The filter expression model for the search from values.
    ValueSetDefinition:
      type: object
      required: [uri, data]
      properties:
        uri:
          type: string
          format: uri
        data:
          $ref: '#/components/schemas/ValueSetDefinitionData'
    ValueSetDefinitionData:
      type: object
      required: [kind, qualifiedName]
      properties:
        kind:
          $ref: '#/components/schemas/ValueSetDefinitionKind'
        qualifiedName:
          type: string
          description: |
            The logical name of the given value set. In case of an enum it is the fully qualified name of the
            enum class.
        objectDefinition:
          type: string
          format: uri
          description: The object definition of the value set.
        typeClass:
          type: string
          description: The fully qualified name of the type class.
        keyProperty:
          type: string
          description: |
            The name of the key property in the value. It will be the value that copied into the reference when a given
            item is selected from the value set. If it is not set then the default is the URI if it exists in the given object.
            Or it will be the code or id in this order.
        storageSchema:
          type: string
          description: The name of the storage schema. Necessary to access the objects or the container (list or map).
        containerName:
          type: string
          description: The name of the list or map that contains the object uri list. It must be a unique name inside the storageSchema.
        iconCode:
          type: string
          description: Optional icon code for the given value set.
        inlineValues:
          type: array
          description: The value list that contains the value objects.
          items:
            type: object
        keys:
          type: array
          description: The list of keys. If we have this
          items:
            type: object
        expression:
          $ref: '#/components/schemas/ValueSetExpression'
    ValueSetDefinitionKind:
      enum: [ENUM, INLINE, LIST, MAP, ALLOF, SETOF, SEARCHINDEXBASED, COMPOSITE, UNDEFINED]
    ValueSetExpression:
      type: object
      required: [operation, ignoreVersion, operands]
      properties:
        operation:
          $ref: '#/components/schemas/ValueSetOperation'
        ignoreVersion:
          type: boolean
          default: false
        operands:
          type: array
          items:
            $ref: '#/components/schemas/ValueSetOperand'
    ValueSetOperand:
      type: object
      required: [namespace, name]
      properties:
        namespace:
          type: string
          description: |
            The namespace of the referred value set.
        name:
          type: string
          description: |
            The name of the referred value set.
        data:
          $ref: '#/components/schemas/ValueSetDefinitionData'
        expression:
          $ref: '#/components/schemas/ValueSetExpression'
    ValueSetOperation:
      enum: [UNION, INTERSECT, DIF, SYMMETRICDIF]
    GenericValue:
      type: object
      required: []
      properties:
        uri:
          type: string
          format: uri
          description: The uri the value.
        code:
          type: string
          description: The logical code of the value.
        name:
          type: string
          description: The value as it is.
        description:
          type: string
          description: |
            The description of the value if any. It is optional but can be usefull to have some
            idea about the given value.
        icon:
          type: string
          description: The code of icon that can be associatied with this value. It may be a uri.
        inactive:
          type: boolean
          description: Indicates if this value is inactive.

    ValueSetDefinitionIdentifier:
      type: object
      properties:
        namespace:
          type: string
          description: |
            The namespace containing an arbitrary number of value sets. If it's null, the identifier
            refers to the global namespace.
        qualifiedName:
          type: string
          description: |
            The unique name of the value set within its namespace.
      required: [qualifiedName]
    KeyValuePair:
      required: [key]
      properties:
        key:
          type: string
        value:
          type: object
    ValueTransformationConfig:
      description: |
        This object is a configuration to define the transformation from an input value set to an output
        value set. The transformation could be value mapping when the list of the values from the input
        are mapped one by one to the output values. This object is managed as a MDM entry in the platform.
        The ValueTransformationApi is using this MDM entry by default. It has a data inline object that contains
        configuration itself.
      type: object
      required: [uri]
      properties:
        uri:
          type: string
          format: uri
        data:
          $ref: '#/components/schemas/ValueTransformationConfigData'
    ValueTransformationConfigData:
      description: |
        This object is a configuration to define the transformation from an input value set to an output
        value set. The transformation could be value mapping when the list of the values from the input
        are mapped one by one to the output values. This object is managed as a MDM entry in the platform.
        The ValueTransformationApi is using this MDM entry by default. If manage it by MDM then we enapsulate this
        object into a ValueTransformationConfig.
      type: object
      required: [name, mappings]
      properties:
        name:
          description: The unique name of the transformation configuration. It matters only if it is managed by MDM.
          type: string
        kind:
          $ref: '#/components/schemas/ValueTransformationKind'
        mappings:
          type: array
          items:
            $ref: '#/components/schemas/ValueTransformationMappingItem'
        mdmDefinition:
          description: If the kind is a resolution by MDM entry then this is the name of MDM definition.
          type: string
        mdmEntry:
          description: If the kind is a resolution by MDM entry then this is the name of MDM entry inside the definition.
          type: string
        mdmPropertyName:
          description: If the kind is a resolution by MDM entry then this is the name of MDM entry inside the definition.
          type: string
        transformation:
          description: |
            If the transformation is too complex then a transformation InvocationRequest can be defined let it be script or
            api call.
          type: InvocationRequest
    ValueTransformationMappingItem:
      description: |
        The mapping item contains a source value and a target value object pair. Even the source and the target could be
        object also. In this case we save the JSON object.
      type: object
      properties:
        sourceValue:
          type: object
        targetValue:
          type: object
    ValueTransformationResult:
      description: |
        This item is returned by the tranform methods. It contains the transformed value or the error code if any.
      type: object
      properties:
        sourceValue:
          type: object
        transformedValue:
          type: object
        error:
          description: The error about transforming the given value.
          type: string
    ValueTransformationKind:
      description: This enumeration defines the kinds of the transformation like MAPPING, RESOLVEBYMDM, CUSTOM etc.
      enum: [MAPPING, RESOLVEBYMDM, CUSTOM]